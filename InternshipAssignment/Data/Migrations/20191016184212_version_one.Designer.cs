// <auto-generated />
using InternshipAssignment.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace InternshipAssignment.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191016184212_version_one")]
    partial class version_one
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InternshipAssignment.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("InternshipAssignment.Models.CvModel", b =>
                {
                    b.Property<int>("CvId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AcademicQualification")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("CareerObjective")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("CurrentAddress")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<int>("DeptId");

                    b.Property<string>("EmailOne")
                        .IsRequired();

                    b.Property<string>("EmailTwo")
                        .IsRequired();

                    b.Property<string>("ExtraCurricularFive")
                        .HasMaxLength(2000);

                    b.Property<string>("ExtraCurricularFour")
                        .HasMaxLength(2000);

                    b.Property<string>("ExtraCurricularOne")
                        .HasMaxLength(2000);

                    b.Property<string>("ExtraCurricularThree")
                        .HasMaxLength(2000);

                    b.Property<string>("ExtraCurricularTwo")
                        .HasMaxLength(2000);

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FieldOfInterest")
                        .HasMaxLength(2000);

                    b.Property<int>("GenderId");

                    b.Property<int>("LanguageId");

                    b.Property<string>("LanguageThree")
                        .HasMaxLength(100);

                    b.Property<string>("LanguageTwo")
                        .HasMaxLength(100);

                    b.Property<int>("MaritalStatusId");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NIDNumber")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PermanentAddress")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("PhoneOne")
                        .IsRequired();

                    b.Property<string>("PhoneTwo")
                        .IsRequired();

                    b.Property<string>("PositionOne")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("PositionTwo")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("ProfileImage")
                        .IsRequired();

                    b.Property<string>("ProjectContentFive")
                        .HasMaxLength(2000);

                    b.Property<string>("ProjectContentFour")
                        .HasMaxLength(2000);

                    b.Property<string>("ProjectContentOne")
                        .HasMaxLength(2000);

                    b.Property<string>("ProjectContentThree")
                        .HasMaxLength(2000);

                    b.Property<string>("ProjectContentTwo")
                        .HasMaxLength(2000);

                    b.Property<string>("ProjectNameFive")
                        .HasMaxLength(2000);

                    b.Property<string>("ProjectNameFour")
                        .HasMaxLength(2000);

                    b.Property<string>("ProjectNameOne")
                        .HasMaxLength(2000);

                    b.Property<string>("ProjectNameThree")
                        .HasMaxLength(2000);

                    b.Property<string>("ProjectNameTwo")
                        .HasMaxLength(2000);

                    b.Property<int>("ReligionId");

                    b.Property<string>("TeacherNameOne")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("TeacherNameTwo")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("TechnicalSkillContentFive")
                        .HasMaxLength(2000);

                    b.Property<string>("TechnicalSkillContentFour")
                        .HasMaxLength(2000);

                    b.Property<string>("TechnicalSkillContentOne")
                        .HasMaxLength(2000);

                    b.Property<string>("TechnicalSkillContentThree")
                        .HasMaxLength(2000);

                    b.Property<string>("TechnicalSkillContentTwo")
                        .HasMaxLength(2000);

                    b.Property<string>("TechnicalSkillTitleFive")
                        .HasMaxLength(200);

                    b.Property<string>("TechnicalSkillTitleFour")
                        .HasMaxLength(200);

                    b.Property<string>("TechnicalSkillTitleOne")
                        .HasMaxLength(200);

                    b.Property<string>("TechnicalSkillTitleThree")
                        .HasMaxLength(200);

                    b.Property<string>("TechnicalSkillTitleTwo")
                        .HasMaxLength(200);

                    b.Property<string>("UniversityName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("YourEmail")
                        .IsRequired();

                    b.Property<string>("YourName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("YourPhone")
                        .IsRequired();

                    b.HasKey("CvId");

                    b.HasIndex("DeptId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("ReligionId");

                    b.ToTable("CvModel");
                });

            modelBuilder.Entity("InternshipAssignment.Models.Department", b =>
                {
                    b.Property<int>("DeptId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("EntryDate");

                    b.HasKey("DeptId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("InternshipAssignment.Models.GenderModel", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EntryDate");

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("GenderId");

                    b.ToTable("GenderModel");
                });

            modelBuilder.Entity("InternshipAssignment.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EntryDate");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("LanguageId");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("InternshipAssignment.Models.MaritalStatus", b =>
                {
                    b.Property<int>("MaritalStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EntryDate");

                    b.Property<string>("MaritalStatusName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("MaritalStatusId");

                    b.ToTable("MaritalStatus");
                });

            modelBuilder.Entity("InternshipAssignment.Models.Religion", b =>
                {
                    b.Property<int>("ReligionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EntryDate");

                    b.Property<string>("ReligionName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("ReligionId");

                    b.ToTable("Religion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("InternshipAssignment.Models.CvModel", b =>
                {
                    b.HasOne("InternshipAssignment.Models.Department", "Department")
                        .WithMany("CvModel")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternshipAssignment.Models.GenderModel", "GenderModel")
                        .WithMany("CvModel")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternshipAssignment.Models.Language", "Language")
                        .WithMany("CvModel")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternshipAssignment.Models.MaritalStatus", "MaritalStatus")
                        .WithMany("CvModel")
                        .HasForeignKey("MaritalStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternshipAssignment.Models.Religion", "Religion")
                        .WithMany("CvModel")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InternshipAssignment.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InternshipAssignment.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InternshipAssignment.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InternshipAssignment.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
